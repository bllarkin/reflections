When would you want to use a remote repository rather than keeping all your work
local?

    This gives you a few things.  One, it gives you a backup of both your files and commit history.  It also gives you an easy way to share that same information as well as collaborate with others on a single codebase.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If there are changes in the remote repository that may conflict with changes you have made locally, or just may be dependent on certain changes, you want to be aware of those changes before you merge so you can either work around them, revert them, or branch for a new feature.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are used to copy another project from a different repository into yours so you can use it, make changes, etc. without impacting the original while still giving credit to the creator/source.  Clones are direct copies of your own repositories, typically used when pulling down a repository from a remote Git source to your local computer (though they can also be used to create copies in the same environment or from one remote source to another). Branches are divergences off the main piece of the repository that don't impact the "master" (production product) but allow you to make changes and still maintain that connection back to the production area as well as allow you, once development of a new bugfix or feature is done, to merge those changes back to production easily.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This allows you to do a couple of things.  One, it allows you to see alterations that are being made by other collaborators while also stopping their work from potentially impacting yours in the middle of you current task.  Additionally, it controls the code you are altering locally, allowing you to work somewhere where you might not have internet access while still allowing you the ability to see the existing codebase.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Probably the most common method would be using something like Dropbox or Google Drive to share files between people.  This would be useful because everyone would always have the latest versions due to automatic, real-time syncing.  A problem there, though, would be potentially editing the same files at the same time without the ability to handle file conflicts via merging files.  Additionally, your file history would be full of non-meaningful versions, especially for folks that habitually save A LOT like me.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
