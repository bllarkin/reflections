What happens when you initialize a repository? Why do you need to do it?

  When you initialize, it adds the required .git hidden folder.  It does this so you can begin tracking file changes of that reporsitory using the git tools.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area gives you the ability to really pick and choose what you are including in a given commit.  This allows you to keep commits small as well as segment them in a way to include only exactly what is needed.  

How can you use the staging area to make sure you have one commit per logical
change?

  You can easily use this to only add files that are impactful of a specific feature or change to the staging area, then committing only those files together in one commit.  This keeps only the relevant changes in one commit, while leaving out other possible changes that are not relevant out of the commit.  Additionally, you can compare your changes (both from the working directory to the staging area or staging area to the last commit) to ensure that the changes you are committing are all related.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches help to keep histories of new features and experiments separate from the master branch that should be moving forward with bug fixes and adjustments.  This helps to keep the master bug fixes from being held up by new features that might be in development or other high-impact changes.

How do the diagrams help you visualize the branch structure?

  Diagrams help to understand how the branches interact with one another as well as the way that Git will trace back through the branches for the history that it creates.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
